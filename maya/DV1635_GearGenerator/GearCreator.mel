// Check if a window is already open
if (`window -exists gearCreatorWin`) 
{
    deleteUI gearCreatorWin;
}

// Create window   
window -title "Gear Creator" -widthHeight 200 200 gearCreatorWin;
columnLayout -adjustableColumn true;

// Set contents of window
text -label "Teeths:";
intField -minValue 1 -maxValue 25 -value 10 gearTeeth;

text -label "Gear Thickness:";
floatField -minValue 0.1 -maxValue 2.0 -value 0.5 gearThickness;
button -label "Create Gear" -command "generateGear()";

showWindow gearCreatorWin;

// Create global variables to hold gear teeth and thickness
global int $gearTeeth;
global float $gearThickness;

// Create procedure that should run every time the button is pressed
global proc generateGear()
{
    $gearTeeth = `intField -query -value gearTeeth`;
    $gearThickness = `floatField -query -value gearThickness`;
    
    // Create the gear base
    string $gearBase[] = `polyCylinder -r 2 -h $gearThickness -sx 16 -sy 1 -sz 1 -ax 0 0 0`;
    
    // Convert the base cylinder to a string
    // Extract the name of the cylinder from the array
    string $gearBaseString = $gearBase[0];
    
    // Calculate gear parameters
    float $innerRadius = 0.4;
    float $outerRadius = 1.0;

    // Extrude faces to create gear-like shape
    string $selectedFaces[] = {};
    for ($i = 0; $i < $gearTeeth; $i++) 
    {
        $selectedFaces[$i] = ($gearBaseString + ".f[" + $i + "]");
    }
    
    select $selectedFaces;
    polyExtrudeFacet -ltz $gearThickness -ls 1 1 1; 
    
    int $numTeethFaces = $gearTeeth;
    
    // Create teeth here!
    for ($i = 0; $i < $numTeethFaces; $i++) 
    {
        if ($i % 2 == 0) 
        {
            // Create teeth on even faces
            float $angle = $i * (360.0 / $numTeethFaces);
            string $selectedFace = $selectedFaces[$i];
            
            // Calculate the position for each tooth
            float $toothX = ($outerRadius + 0.1) * cos(deg_to_rad($angle));
            float $toothY = ($outerRadius + 0.1) * sin(deg_to_rad($angle));
            
            // Move the face to create the tooth
            // move -r $toothX 0 $toothY $selectedFace;
            // rotate -r 0 0 $angle $selectedFace;
        }
    }
}