global proc createGearGenWindow()
{
    // Check if a window is already open
    if (`window -exists gearCreatorWin`) 
    {
        deleteUI gearCreatorWin;
    }
    
    // Create window   
    window -title "Gear Generator" -widthHeight 400 300 gearCreatorWin;
    columnLayout -adjustableColumn true;
    
    // Set contents of window
    floatSliderGrp -label "Radius:" -minValue 1 -maxValue 5 -field true -value 1 gearRadius;
    intSliderGrp -label "Number of Teeth:" -minValue 1 -maxValue 50 -field true -value 10 gearTeeth;
    floatSliderGrp -label "Thickness:" -minValue 0.5 -maxValue 2 -field true -value 1 gearThickness;
    button -label "Generate Gear" -command "generateGear()";
    
    showWindow gearCreatorWin;
}

// Function to generate a gear after each button press
global proc generateGear()
{
    if(`objExists gearCylinder`)
    {
        delete gearCylinder;
    }
    
    float $radius = `floatSliderGrp -q -value gearRadius`;
    int $teeth = `intSliderGrp -q -value gearTeeth`;
    float $thickness = `floatSliderGrp -q -value gearThickness`;
    int $subDivs = $teeth * 2;
    
    // Create the gear base
    string $gearBase[] = `polyCylinder -name "gearCylinder" -r $radius -h $thickness -sx $subDivs -sy 1 -sz 1 -ax 0 0 0`;
    
    // Convert the base cylinder to a string
    // Extract the name of the cylinder from the array
    string $gearBaseString = $gearBase[0];

    // Extrude every other face to create gear-like shape
    string $selectedFaces[] = {};
    for ($i = 0; $i < $subDivs; $i += 2) 
    {
        $selectedFaces[size($selectedFaces)] = ($gearBaseString + ".f[" + $i + "]");
    }
    
    float $extrusionValue = $thickness * 0.75;
    select $selectedFaces;
    polyExtrudeFacet -ltz $extrusionValue -ls 0.5 1 1; 
}

// Call GUI function
createGearGenWindow();